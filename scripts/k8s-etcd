#!/bin/sh
# [This file is part of the zabbix-agent-osso package]
# REQUIRES: jq, kubectl
#

get_contexts() {
    kubectl config get-contexts -oname
}

get_namespaces() {
    kubectl --context "$1" get namespace \
        -l ossobv/zabbix-agent-osso.k8s-etcd=true \
        -o go-template='{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' \
        2>/dev/null
}

get_endpoints() {
    kubectl --context "$1" -n "$2" get configmap "$3" \
        -ojsonpath='{.data.status}' | jq -r '.etcd_health[] | .endpoint'
}

make_json() {
    echo '{"{#CONTEXT}":"'$1'","{#NAMESPACE}":"'$2'",' \
        '"{#STATUS_NAME}":"'$3'","{#ENDPOINT}":"'$4'"}'
}


if [ "$1" = "discover" ]; then
    for context in $(get_contexts); do
        for namespace in $(get_namespaces "$context"); do
            status_name=$(kubectl --context $context get namespace $namespace \
                -ojsonpath='{.metadata.labels}' |
                jq -r '."ossobv/zabbix-agent-osso.k8s-etcd-status-name"')
            endpoints=$(get_endpoints "$context" "$namespace" "$status_name")
            for endpoint in $endpoints; do
                make_json "$context" "$namespace" "$status_name" "$endpoint"
            done
        done
    done | jq -sc
    exit 0

elif [ "$1" = "show-health-json" ]; then
    # NOTE: Yes, .endpoint (lowercase) here.
    kubectl --context "$2" -n "$3" get configmap "$4" \
            -ojsonpath='{.data.status}' |
        jq '.etcd_health[] | select(.endpoint ==  "'"$5"'")'
    exit 0

elif [ "$1" = "show-status-json" ]; then
    # NOTE: Yes, .Endpoint (uppercase) here.
    kubectl --context "$2" -n "$3" get configmap "$4" \
            -ojsonpath='{.data.status}' |
        jq '.etcd_status[] | select(.Endpoint ==  "'"$5"'")'
    exit 0

else
    echo "possible actions:
    discover
    show-health-json context namespace status_name endpoint
    show-status-json context namespace status_name endpoint" >&2
    exit 1
fi
