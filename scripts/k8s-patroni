#!/bin/sh
# [This file is part of the zabbix-agent-osso package]
# REQUIRES: kubectl, jq
#

get_contexts() {
    kubectl config get-contexts -oname
}

get_namespaces() {
    kubectl get namespace -l ossobv/zabbix-agent-osso.k8s-patroni=true \
            --context "$1" -oname 2>/dev/null |
        sed -e 's/namespace\///'
}

get_configmaps() {
    kubectl --context "$1" -n "$2" get cm -o name |
        sed -e 's/^configmap\///;/^status-\(citus\|postgres\)-/!d'
}

make_json_clusters() {
     echo '{"{#CONTEXT}":"'$1'","{#NAMESPACE}":"'$2'",'"\
        "'"{#CONFIGMAP}":"'$3'","{#CLUSTER}":"'${3##status-}'"}'
}

make_json_members() {
    kubectl --context "$1" -n "$2" get cm "$3" \
            -o jsonpath='{.data.status}' |
        jq -r '.cluster_status.members[] | {"{#CONTEXT}":"'$1'",'"\
            "'"{#NAMESPACE}":"'$2'","{#CONFIGMAP}":"'$3'",'"\
            "'"{#CLUSTER}":"'${3##status-}'","{#MEMBER}":.name}'
}

if [ "$1" = "--discover-clusters" ]; then
    for context in $(get_contexts); do
        for namespace in $(get_namespaces "$context"); do
            for configmap in $(get_configmaps "$context" "$namespace"); do
                make_json_clusters "$context" "$namespace" "$configmap"
            done
        done
    done | jq -sc
    exit 0

elif [ "$1" = "--discover-members" ]; then
    for context in $(get_contexts); do
        for namespace in $(get_namespaces "$context"); do
            for configmap in $(get_configmaps "$context" "$namespace"); do
                make_json_members "$context" "$namespace" "$configmap"
            done
        done
    done | jq -sc
    exit 0

elif [ "$1" = "--get-member" ]; then
    exec kubectl --context "$2" -n "$3" get cm "$4" \
        -o jsonpath='{.data.status}' \
        | jq '.cluster_status.members[] | select(.name == "'"$5"'")'
    exit 0


elif [ "$1" = "--get-cluster" ]; then
    exec kubectl --context "$2" -n "$3" get cm "$4" -o jsonpath='{.data.status}'
    exit 0


else
    echo "possible options:
    --discover-clusters     no paramaters
    --discover-members      no paramaters

    --get-member  context namespace configmap member_name
    --get-cluster context namespace configmap"
    exit 1
fi
