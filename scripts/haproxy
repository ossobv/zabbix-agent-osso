#!/usr/bin/env python3
# [This file is part of the zabbix-agent-osso package]

import argparse
import json
import os
import socket
from stat import S_ISSOCK

HAPROXY_RUNDIR = '/var/run/haproxy'

# See https://docs.haproxy.org/2.4/management.html#9.1 for the format
CURRENT_CONNECTION_INDEX = 4
MAX_CONNECTION_INDEX = 6
NAME_INDEX = 0
SERVICE_NAME_INDEX = 1
STATUS_INDEX = 17


def send_command(socket_path, command):
    """
    Send command to socket and read all data from it.

    Returns None on ConnectionRefusedError.
    """
    response = b''

    with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as client:
        try:
            client.connect(socket_path)
            client.sendall(command.encode())
            client.shutdown(socket.SHUT_WR)

            while True:
                chunk = client.recv(4096)
                if not chunk:
                    break
                response += chunk
        except ConnectionRefusedError:
            return None

    return response.decode('utf-8')


def get_stats(file):
    """
    Get frontend and backend stats for a socket.

    Returns None if socket does not provide stats.
    """
    output = {
        'BACKEND': {},
        'FRONTEND': {},
    }

    command = 'show stat\n'
    socket_path = f'{HAPROXY_RUNDIR}/{file}'
    stats = send_command(socket_path, command)
    if not stats:
        return None
    stat_lines = stats.rstrip().splitlines()
    if not stat_lines[0].startswith('# pxname,svname'):
        # Not a stats socket.
        return None
    split_stat_lines = [line.split(',') for line in stat_lines]

    frontend_lines = [
        line for line in split_stat_lines
        if (line[SERVICE_NAME_INDEX] == 'FRONTEND'
            and line[NAME_INDEX] != 'stats')]

    backend_lines = [
        line for line in split_stat_lines
        if (line[SERVICE_NAME_INDEX] == 'BACKEND'
            and line[NAME_INDEX] != 'stats')]

    for line in frontend_lines:
        name = line[NAME_INDEX]
        status = line[STATUS_INDEX]
        connection_max = int(line[MAX_CONNECTION_INDEX])
        connection_current = int(line[CURRENT_CONNECTION_INDEX])
        connection_pct = int(
            int(connection_current) / int(connection_max) * 100)

        output['FRONTEND'][name] = {
            'status': status,
            'conn_cur': connection_current,
            'conn_max': connection_max,
            'conn_pct': connection_pct,
        }

    for line in backend_lines:
        name = line[0]
        status = line[STATUS_INDEX]

        servers = [
            line for line in split_stat_lines
            if (line[NAME_INDEX] == name
                and not line[SERVICE_NAME_INDEX] == 'BACKEND'
                and not line[SERVICE_NAME_INDEX] == 'FRONTEND')]
        server_count = len(servers)
        server_up_count = len(
            [line for line in servers
             if line[STATUS_INDEX] == 'UP'])
        if server_count > 0:
            backend_server_up_pct = int(
                (server_up_count / server_count) * 100)
        else:
            backend_server_up_pct = 0

        output['BACKEND'][name] = {
            'status': status,
            'servers_total': server_count,
            'servers_up': server_up_count,
            'servers_up_pct': backend_server_up_pct,
        }

    return output


def get_services(file):
    """
    Returns list of frontend and backend names.
    """
    frontend_names = backend_names = []
    stats = get_stats(file)
    if stats:
        frontend_names = stats['FRONTEND'].keys()
        backend_names = stats['BACKEND'].keys()

    return frontend_names, backend_names


def get_files():
    """
    Get all socket files in haproxy rundir.
    """
    sock_files = []

    for dirname, dirs, files in os.walk(HAPROXY_RUNDIR):
        for file in files:
            full_path = os.path.join(dirname, file)
            try:
                file_mode = os.stat(full_path).st_mode
                if S_ISSOCK(file_mode):
                    rel_path = os.path.relpath(full_path, HAPROXY_RUNDIR)
                    sock_files.append(rel_path)
            except FileNotFoundError:
                # File might have been removed between walk and stat.
                pass

    return sock_files


def get_discover_services(type):
    output = []

    for file in get_files():
        frontends, backends = get_services(file)
        if type == 'FRONTEND':
            for frontend in frontends:
                output.append({
                    '{#SOCKET}': file,
                    '{#NAME}': frontend,
                })
        else:
            for backend in backends:
                output.append({
                    '{#SOCKET}': file,
                    '{#NAME}': backend,
                })

    return output


def discover(type):
    """
    Output all instances in zabbix discovery format.
    """
    print(json.dumps(get_discover_services(type)))


def get_all():
    """
    Ouput all data in json to be indexed by zabbix.
    """
    output = {}
    for file in get_files():
        stats = get_stats(file)
        if stats:
            output[file] = stats
    print(json.dumps(output))


def main():
    parser = argparse.ArgumentParser(
        prog='haproxy-status-scraper',
        description='Simple socket based haproxy status scraper')
    parser.add_argument(
        'command',
        choices=('discover-frontends', 'discover-backends', 'get-all-data'),
        help='Which command to run')

    args = parser.parse_args()

    if args.command == 'discover-frontends':
        discover('FRONTEND')
    elif args.command == 'discover-backends':
        discover('BACKEND')
    elif args.command == 'get-all-data':
        get_all()


if __name__ == '__main__':
    main()
