# [This file is part of the zabbix-agent-osso package]
# DEPENDS: vcutil [cert-expiry-finder, psdiff, wcheckrestart]
# SUGGESTS: mail-transport-agent [mailq]
# CRON: scripts/daemon.max_files
# CRON: scripts/daemon.oom_kill
#
# We hold a few items here that could be part of a larger template too.
# For instance the mail.queued is the basic check that you want on a
# standalone server, while you might want a full fledged
# postfix-mail-monitor on a real mail server.
#
# Whether vcutil psdiff reports more/fewer processes than expected
# (but only if the DB exists).
UserParameter=daemon.psdiff.missing, if test -r /var/lib/psdiff.db; then psdiff show-missing --retry 2>&1 | sed -ne 's/^-[[:blank:]]*\(.\{1,60\}\).*/- \1/p'; else echo ZBX_NOTSUPPORTED; fi
UserParameter=daemon.psdiff.extra, if test -r /var/lib/psdiff.db; then psdiff show-extra --retry 2>&1 | sed -ne 's/^+[[:blank:]]*\(.\{1,60\}\).*/+ \1/p'; else echo ZBX_NOTSUPPORTED; fi
# Gocollect health.
UserParameter=daemon.gocollect.healthy, sudo /etc/zabbix/scripts/daemon.gocollect healthy
# Failed systemd units.
UserParameter=daemon.systemd.failed, /etc/zabbix/scripts/daemon.systemd.failed
# Systemd tasks count ("threads", sort of), should be well below 4915.
# But, see this: https://github.com/systemd/systemd/issues/13419
# The default has been raised a lot since then. So we may not need this at all.
UserParameter=daemon.systemd.maxtasks, systemctl list-units --no-legend --state=active | sed -e 's/^[^ ]* \+//;s/[[:blank:]].*//;/[.]service$/!d' | xargs systemctl show -p TasksCurrent | sed -e '/^TasksCurrent=/!d;s/TasksCurrent=//;/^18446744073709551615$/d' | sort -rn | head -n1
# Service restart required (after updates)? Ignore pid1, dbus and
# sd-pam. (DBus refuses to restart in Ubuntu-systemd setups.)
UserParameter=daemon.wcheckrestart.count, sudo wcheckrestart fh | grep -v '^ *1 \| /usr/bin/dbus-daemon\| (sd-pam)' | wc -l
# Is a process running? Allow multiple names, separated by comma.
UserParameter=daemon.is_running[*], pidof -x $1 $2 $3 $4 $5 $6 $7 $8 $9 >/dev/null 2>&1 && echo 1 || echo 0
# Check max open files limit.
UserParameter=daemon.max_files.promille, awk '{print $1}' /var/lib/zabbix/scripts/daemon.max_files 2>/dev/null || echo ZBX_NOTSUPPORTED
UserParameter=daemon.max_files.pid, awk '{print $2}' /var/lib/zabbix/scripts/daemon.max_files 2>/dev/null || echo ZBX_NOTSUPPORTED
UserParameter=daemon.max_files.process, awk '{print $3}' /var/lib/zabbix/scripts/daemon.max_files 2>/dev/null || echo ZBX_NOTSUPPORTED
# How many daemonesses were killed by the OOM killer recently.
UserParameter=daemon.oom_kill.count, cat /var/lib/zabbix/scripts/daemon.oom_kill 2>/dev/null || echo ZBX_NOTSUPPORTED
# Returns the days left for the certificate that expires the soonest.
# This cachefile is updated by cron. (Default to 50 when not found,
# we do not want an alert when this file does not exist yet.)
UserParameter=daemon.cert.minexpiry, cat /var/lib/zabbix/scripts/daemon.cert.minexpiry 2>/dev/null || echo 50
# Current logins.
UserParameter=daemon.logins.non-pts, last | awk 'BEGIN{s=0} /still logged in/{if(substr($2,1,4)!="pts/")s+=1} END{print s}'
UserParameter=daemon.logins.pts, last | awk 'BEGIN{s=0} /still logged in/{if(substr($2,1,4)=="pts/")s+=1} END{print s}'
# Basic mail monitoring.
# - We don't want local mail generally. Maxdepth so we don't scan too much.
UserParameter=daemon.mail.localdate, ( echo 0; find /var/spool/mail/ -maxdepth 1 -type f -print0 | xargs -0 --no-run-if-empty stat -c%Y ) | sort -rn | head -n1
UserParameter=daemon.mail.localsize, find /var/spool/mail/ -maxdepth 1 -type f -print0 | xargs -0 --no-run-if-empty stat -c%s | awk 'BEGIN{s=0}{s+=$1}END{print s}'
# - The queue should be empty most of the time
UserParameter=daemon.mail.queued, mailq 2>/dev/null | tail -n1 | sed -e 's/.* in \([0-9]*\) .*/\1/;s/Mail queue is empty/0/'

# "Discover" items passed by the caller
UserParameter=daemon.procmem.discover[*], n=; echo '['; for proc in $1; do test -z "$n" || echo ,; n=1; echo '{"{#PROC}":"'"$proc"'"}'; done; echo ']'
UserParameter=daemon.procmem.rss[*], ps -ho rss -p "$(pidof "$1" | tr ' ' , 2>/dev/null)" 2>/dev/null | awk 'BEGIN{s=0} {s+=$''1} END{printf "%.0f\n",s*1024}'
