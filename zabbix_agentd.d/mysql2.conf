# [This file is part of the zabbix-agent-osso package]
#
# Note: the "mysql." plain versions have been removed since 2021-03-02
#   because they conflicted with embedded plugins in zabbix_agent2
# Note: all related files have been renamed so mysql2 since 2022-06-22
#   because they conflicted with other users/uses of zabbix
#
# === SETUP ===
#
# # sed -e1,3d mysql2.myinstance.cnf.example > /etc/zabbix/config/mysql2.instance.cnf
# # chown zabbix: /etc/zabbix/config/mysql2.instance.cnf
# # chmod 400 /etc/zabbix/config/mysql2.instance.cnf
# and use your favorite editor to edit
#
# You may create more than one /etc/zabbix/config/mysql2.INSTANCE.cnf config.
# For backwards compatibility, if no such file is found, it also checks
# /etc/zabbix/mysql/.my.cnf.
#
# You'll need a 'zabbix-check' user. Example CREATE USER:
#
#   mysql> CREATE USER 'zabbix-check'@'localhost' IDENTIFIED BY 'supersecretpasswd';
#
# For replication monitoring you'll also need this.
#
#   mysql> GRANT REPLICATION CLIENT ON *.* TO 'zabbix-check'@'localhost';
#
# For table size or max column size monitoring and doing SELECT healthchecks
# over all databases/tables, you'll need read rights:
#
#   mysql> GRANT SELECT ON *.* TO 'zabbix-check'@'localhost';
#

# === MULTI-INSTANCE VERSION ===

UserParameter=mysql2.discover_instances, /etc/zabbix/scripts/mysql2 discover_instances

# MySQL versions (client not needed per instance, but for consistency)
UserParameter=mysql2.version.client[*], /etc/zabbix/scripts/mysql2 cli '$1' -V
UserParameter=mysql2.version.server[*], /etc/zabbix/scripts/mysql2 cli '$1' -BNe "SHOW VARIABLES LIKE 'version';"

# MySQL checks
UserParameter=mysql2.status[*], /etc/zabbix/scripts/mysql2 cli '$1' -BNe "SHOW GLOBAL STATUS WHERE variable_name='$2';" 2>/dev/null | awk '{print $''2} END {if(!NR)print 0}'
UserParameter=mysql2.system[*], /etc/zabbix/scripts/mysql2 cli '$1' -BNe "SHOW VARIABLES LIKE '$2';" 2>/dev/null | awk '{print $''2} END {if(!NR)print 0}'
UserParameter=mysql2.is-alive[*], /etc/zabbix/scripts/mysql2 is-alive '$1'
# https://jira.mariadb.org/browse/MDEV-24159 -- Millions of GRA_*.log files
# If there are millions of GRA files in /var/lib/mysql, then performance
# decreases when finding all databases/schemas in /var/lib/mysql:
# (The sed expressions turns "real 0m0.123s" into 0.123 or "1m2.345s" into "102.345".)
UserParameter=mysql2.perf.schemata[*], /bin/bash -c 'time /etc/zabbix/scripts/mysql2 cli $1 -BNe "SELECT schema_name FROM information_schema.schemata;"' 2>&1 | sed -e '/^real[[:blank:]]/!d;s/^real[[:blank:]]*//;s/^0m//;s/s$//;s/m/0/'

# MySQL SELECT healthchecking
UserParameter=mysql2.select_healthcheck[*], cat /var/lib/zabbix/scripts/mysql2.'$1'

# MySQL replication
# (duplicating discover and is-alive, because they're in different templates)
UserParameter=mysql2.slave.discover_instances, /etc/zabbix/scripts/mysql2 discover_instances
UserParameter=mysql2.slave.is-alive[*], /etc/zabbix/scripts/mysql2 is-alive '$1'
UserParameter=mysql2.slave.io-running[*], /etc/zabbix/scripts/mysql2 cli '$1' -Be 'SHOW SLAVE STATUS\G' 2>/dev/null | awk '/^ *Slave_IO_Running:/{if($''2=="Yes"){i=1;print 1}} END{if(!i)print 0}'
UserParameter=mysql2.slave.sql-running[*], /etc/zabbix/scripts/mysql2 cli '$1' -Be 'SHOW SLAVE STATUS\G' 2>/dev/null | awk '/^ *Slave_SQL_Running:/{if($''2=="Yes"){i=1;print 1}} END{if(!i)print 0}'
UserParameter=mysql2.slave.seconds-behind[*], /etc/zabbix/scripts/mysql2 cli '$1' -Be 'SHOW SLAVE STATUS\G' 2>/dev/null | awk '/^ *Seconds_Behind_Master:/{i=1;print $''2} END{if(!i)print 9999}'

# MySQL Galera clustering
# (duplicating discover and is-alive, because they're in different templates)
UserParameter=mysql2.galera.discover_instances, /etc/zabbix/scripts/mysql2 discover_instances
UserParameter=mysql2.galera.is-alive[*], /etc/zabbix/scripts/mysql2 is-alive '$1'
UserParameter=mysql2.galera.status[*], /etc/zabbix/scripts/mysql2 cli '$1' -BNe "SHOW STATUS LIKE '$2';" 2>/dev/null | awk '{print $''2} END {if(!NR)print 0}'

# Flexible parameter to determine database or table size.
# * On the frontend side, use keys like mysql.size[zabbix,history,data].
# * Key syntax is mysql.size[<database>,<table>,<type>].
# * Database may be a database name or "all". Default is "all".
# * Table may be a table name or "all". Default is "all".
# * Type may be "data", "index", "free", "rows" or "both". Both is a sum
#   of data and index. Default is "both".
# * Database is mandatory if a table is specified. Type may always be
#   specified.
# * Returns value in bytes.
# * 'SUM' on data_length or index_length only needed when we are getting
#   this information for whole database instead of a single table
# (Original source: zabbix-agent userparameter_mysql.conf)
UserParameter=mysql2.size[*], /etc/zabbix/scripts/mysql2 cli '$1' -BNe "SELECT SUM(`case "$4" in both|"") echo "data_length+index_length";; data|index) echo "$4_length";; free) echo "data_free";; rows) echo "table_rows";; *) echo "bAd_tYpE";; esac`) FROM information_schema.tables`case "$2" in all|"");; *) echo " WHERE table_schema='$2'";; esac``case "$3" in all|"");; *) echo " AND table_name='$3'";; esac`;"

# Max integer checks (requires select priv on *.*)
UserParameter=mysql2.autoinc.max[*], /etc/zabbix/scripts/mysql2 cli '$1' -BNe "SELECT t.highest_autoint FROM (SELECT b.auto_increment AS highest_autoint, c.numeric_precision - LENGTH(b.auto_increment) AS precision_left FROM information_schema.columns c INNER JOIN information_schema.tables b ON b.table_schema = c.table_schema AND b.table_name = c.table_name WHERE c.extra = 'auto_increment' AND c.numeric_precision IS NOT NULL) t ORDER BY t.precision_left, t.highest_autoint DESC LIMIT 1;"
UserParameter=mysql2.autoinc.column[*], /etc/zabbix/scripts/mysql2 cli '$1' -BNe "SELECT CONCAT(t.table_schema, '.', t.table_name, '.', t.column_name) AS col FROM (SELECT b.table_schema, b.table_name, c.column_name, b.auto_increment AS highest_autoint, c.numeric_precision - LENGTH(b.auto_increment) AS precision_left FROM information_schema.columns c INNER JOIN information_schema.tables b ON b.table_schema = c.table_schema AND b.table_name = c.table_name WHERE c.extra = 'auto_increment' AND c.numeric_precision IS NOT NULL) t ORDER BY t.precision_left, t.highest_autoint DESC LIMIT 1;"


# === UPGRADE INFO ===
#
# Migration from single-instance to multi-instance MySQL monitoring:
# - for backwards compatibility, we must keep[ the mysql.version,
#   mysql.whatever around for a while;
# - we must fall back from /etc/zabbix/config/mysql2.*.cnf to
#   /etc/zabbix/mysql/.my.cnf if the former doesn't exist;
# - we must add the new templates, and rename the old mysql.version users to
#   (old);
# - migration path: create mysql2.version[INSTANCE], and optionally, we may
#   later replace mysql.version[INSTANCE], and even later remove
#   mysql2.version[INSTANCE]
